# Project Git Configuration
# Visual commit and branch display settings

[alias]
    # Beautiful graph views
    graph = log --graph --pretty=format:'%C(auto)%h%d %C(blue)%ar %C(green)%an%C(reset) %s' --all
    lg = log --color --graph --pretty=format:'%C(auto)%h%d %C(blue)%ar %C(green)%an%C(reset) %s' --abbrev-commit --all
    tree = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' --all
    visual = log --graph --pretty=format:'%C(yellow)%h%C(reset) %C(red)%d%C(reset) %s %C(green)(%cr) %C(blue)<%an>%C(reset)' --abbrev-commit --date=relative --all
    
    # Branch visualization
    branches = log --graph --pretty=format:'%C(auto)%h%d %s %C(green)(%ar) %C(blue)<%an>%C(reset)' --abbrev-commit --all --branches
    
    # Quick commands with visual
    cv = !python git_visual.py commit
    gv = !python git_visual.py graph
    
    # Status with graph
    sg = !git status && echo "" && git graph -10
    
    # Commit with automatic graph display
    cg = !git add . && git commit && git graph -10
    
    # Push with graph
    pg = !git push && git graph -10

[color]
    ui = auto
    diff = auto
    status = auto
    branch = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = green
    changed = yellow
    untracked = cyan

[core]
    # Use VS Code as default editor
    editor = code --wait
    
    # Enable colored output
    pager = less -R
    
[log]
    # Always use graph view by default
    decorate = auto
    abbrevCommit = true
    
[format]
    pretty = format:%C(auto)%h%d %s %C(green)(%ar) %C(blue)<%an>%C(reset)
